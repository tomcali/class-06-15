01-First-Example

Explain the following:
In Redux we will extract the state of our application and its components into a store.
Our store will be an object containing any data or state information about our application
As we need to update this we will dispatch an action
Actions have a type and a payload
This Action gets send to a reducer to change our state
We will write smart code to figure out what we want to update and then update it using our new skills with immutable data
Once we update the store our application will receive the new data and update as per React
https://camo.githubusercontent.com/af8803571294fe373a54d039be8f9709f15a2ad4/687474703a2f2f6d616b6569746f70656e2e636f6d2f7374617469632f696d616765732f72656475785f666c6f7763686172742e706e67
Live code the example in 01-first-example explaining that this is only for demonstration of the flow within Redux, it will not be the final way of coding it

More-React-Redux

https://github.com/Alexg2195/UT-ReactJS/tree/master/12-Redux-React

Repetition 1: Walk through application with monitors closed
Redux has a bit of setup to get our app prepared
app.js - We will be wrapping our application in a Provider component that has the store attached to it. This will allow any component to connect to our redux store and also dispatch actions
store.js - As per our last example we need to create a store and pass it our reducer. In this example we are also passing in middleware to improve some functionality later on, as well as including a logger to help us with development
reducers/index.js - We are going to separate out different parts of our applications state and combine them here. Each separate reducer will contain the state they affect and the immutable logic behind them
Welcome.js - To get store data into our components we will use a class decorator for connect. This will wrap our component and pass in the values we declare as props. We will need to add class decorators to our webpack config as well. To update our store we will dispatch actions like before.
actions/countActions.js - We import these action functions to be reused across our entire application.

http://redux.js.org/docs/basics/ExampleTodoList.html

Walkhtrough entire redux tutorial 
http://redux.js.org/docs/basics/

